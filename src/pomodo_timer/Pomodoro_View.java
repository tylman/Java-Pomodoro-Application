package pomodo_timer;


import java.awt.Event.*;
import javax.swing.Timer;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.concurrent.TimeUnit;
import java.util.Stack;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Andrew
 */
public class Pomodoro_View extends javax.swing.JFrame {

    
    
    long startValue, resumeSeconds;
    boolean showResume = true;
    boolean resumeTimer = false;
    String printString = "";
    timeChecker checkTime = new timeChecker();
    pomodoro_counter pomodoroStats = new pomodoro_counter();
    
    
    public Pomodoro_View() {
        initComponents();
        resumeButton.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        timeElapsed_Label = new javax.swing.JLabel();
        pom_static_label = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        pomodoroLabel = new javax.swing.JLabel();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        startReset = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        resumeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        timeElapsed_Label.setText("Time Elapsed:");

        pom_static_label.setText("Pomodoro #:");

        timeLabel.setText("00:00");

        pomodoroLabel.setText("0");

        startReset.setText("Start");
        startReset.setToolTipText("");
        startReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startResetActionPerformed(evt);
            }
        });
        startReset.setBounds(30, 40, 90, 23);
        jLayeredPane2.add(startReset, javax.swing.JLayeredPane.DEFAULT_LAYER);

        exitButton.setText("Exit");
        exitButton.setToolTipText("");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        exitButton.setBounds(270, 40, 80, 23);
        jLayeredPane2.add(exitButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        resumeButton.setText("Pause");
        resumeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resumeButtonActionPerformed(evt);
            }
        });
        resumeButton.setBounds(150, 40, 90, 23);
        jLayeredPane2.add(resumeButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(timeElapsed_Label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pom_static_label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pomodoroLabel)
                            .addComponent(timeLabel))
                        .addContainerGap(205, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeElapsed_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeLabel))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pom_static_label)
                    .addComponent(pomodoroLabel))
                .addGap(18, 18, 18)
                .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // Exit when exit button has been hit
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed
    
    //This actionlistener checks to see if the resume button has been hit. If it has not, use System.nano time to calculate seconds.
    //If resume button has been hit, add 1.0 to the current value at which thread was paused. *kind of hack*
     ActionListener timerFunction = new ActionListener()
                         {
                           public void actionPerformed (ActionEvent e)
                           {
                                if (resumeTimer == false)
                                {
                                    System.out.println(startValue+"\n");
                                    long current_time = get_time(startValue);
                                    printString = checkTime.formatTime(current_time);
                                    timeLabel.setText(printString);
                                    pomodoroLabel.setText(Long.toString(pomodoroStats.pomodoroCount(current_time)));
                                }
                                
                                else if (resumeTimer == true)
                                {
                                    System.out.println(startValue+"\n");
                                    resumeSeconds+=1.0;
                                    printString = checkTime.formatTime((resumeSeconds));
                                    timeLabel.setText(printString);
                                    pomodoroLabel.setText(Long.toString(pomodoroStats.pomodoroCount(resumeSeconds)));
                                }
                             }
                         };
    //Initiate timer with listener
    Timer t = new Timer(1000, timerFunction);

    //Checks to see if the timer thread is running
    // if so, it resets the value of 'startValue'
    private void startResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startResetActionPerformed

        this.set_timer();
        if ((this.t.isRunning()) == true || (this.showResume == false))
        {
            this.set_timer();
            this.resumeTimer = false;
            
        }
        this.t.start();
        resumeButton.setVisible(true);
        startReset.setText("Restart");
        
    }//GEN-LAST:event_startResetActionPerformed

    //Set booleans for action button. Pause by default.
    //If hit, button displays resume and the Timer thread stops
    //If hit again, Timer thread starts and the pause label is shown
    //          resumeTimer flag is also set to true
    private void resumeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resumeButtonActionPerformed
        // TODO add your handling code here:
        if (showResume == true)
        {
            resumeButton.setText("Resume");
            showResume = false;
            this.t.stop();
        }
        else
        {
            resumeButton.setText("Pause");
            showResume = true;
            resumeTimer = true;
            this.t.start();
        }
            
        
    }//GEN-LAST:event_resumeButtonActionPerformed

    
   public void set_timer() //assign current nanotime to long startvalue
   {
        startValue = System.nanoTime();
   }
    
   //Retrieves current time and computes seconds using System nanotime.
    public long get_time(long startValue)
    {
       long time_elapsed = System.nanoTime() - startValue;
       long seconds = TimeUnit.SECONDS.convert(time_elapsed, TimeUnit.NANOSECONDS);
       
       resumeSeconds = seconds;
       
       return seconds;
    }
   
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pomodoro_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pomodoro_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pomodoro_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pomodoro_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Pomodoro_View().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitButton;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLabel pom_static_label;
    private javax.swing.JLabel pomodoroLabel;
    private javax.swing.JButton resumeButton;
    private javax.swing.JButton startReset;
    private javax.swing.JLabel timeElapsed_Label;
    private javax.swing.JLabel timeLabel;
    // End of variables declaration//GEN-END:variables
}
